EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
noname.exe -- emu8086 assembler version: 4.08  
 
[ 2022/12/17  --  17:12:06 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       DATA SEGMENT
[   2]    0000: 05 00 00 02 00 03 00 04 00 05 00 06   LIST DW 5,200H,300H,400H,500H,600H
                                                    
[   3]    000C: 60 03                                 X DW 360H
[   4]        :                                       DATA ENDS
[   5]        :                                       CODE SEGMENT
[   6]        :                                       ASSUME DS:DATA,CS:CODE
[   7]    0010:                                       START:
[   8]        :                                       ; 设置数据段
[   9]    0010: B8 00 00                              MOV AX, DATA
[  10]    0013: 8E D8                                 MOV DS, AX
[  11]        :                                       	;把数组总长度移动到CX当中
[  12]    0015: BB 00 00                              	LEA BX,LIST
[  13]    0018: 8B 0F                                 	MOV CX,[BX]
[  14]        :                                       	;把X移动到AX当中
[  15]    001A: BB 0C 00                              	LEA BX,X
[  16]    001D: 33 C0                                 	XOR AX,AX
[  17]    001F: 8B 07                                 	MOV AX,[BX]
[  18]        :                                       	;取数组的地址
[  19]    0021: BB 00 00                              	LEA BX,LIST
[  20]        :                                       	;进行遍历比较
[  21]    0024:                                       AGAIN:
[  22]    0024: 83 C3 02                              ADD BX,2
[  23]    0027: 3B 07                                 	CMP AX,[BX]
[  24]    0029: 77 02                                 	JA AGAIN2
[  25]    002B: 87 07                                 	XCHG AX,[BX]
[  26]    002D:                                       AGAIN2:	
[  27]    002D: E2 F5                                 LOOP AGAIN
[  28]        :                                       ;将最后一个元素放到X的位置
[  29]    002F: A3 0C 00                              MOV X,AX
[  30]        :                                       ; 程序结束
[  31]    0032: B8 00 4C                              MOV AX,4C00H
[  32]    0035: CD 21                                 INT 21H
[  33]        :                                       CODE ENDS
[  34]        :                                       END START
[  35]        :                                       
[  36]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 37      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 7A      -   check sum (l.byte)
0013: 5C      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 01      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 01      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
